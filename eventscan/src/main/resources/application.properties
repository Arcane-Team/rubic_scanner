spring.datasource.url=${db-url}
spring.datasource.username=${db-user}
spring.datasource.password=${db-password}
io.lastwill.eventscan.version=${project.version}
io.lastwill.eventscan.web3-url=${web3-base-url}
# Specify one of them to define ActiveMQ or HTTP based backend communication
#io.lastwill.eventscan.backend-url=${backend-base-url}
#io.lastwill.eventscan.backend-mq.url=tcp://localhost/
#io.lastwill.eventscan.backend-mq.url=true
# Queue name (topic)
io.lastwill.eventscan.backend-mq.queue=notification
# TTL for queued messages - 24*3600*1000 (24 hours)
io.lastwill.eventscan.backend-mq.ttl-ms=86400000
# connect to remote address timeout
io.lastwill.eventscan.backend.connection-timeout=1000
# wait free connection in pool timeout
io.lastwill.eventscan.backend.get-connection-timeout=10000
# read/write to remote socket timeout
io.lastwill.eventscan.backend.socket-timeout=1000
io.lastwill.eventscan.commit-chain-length=5
# Check new block interval in ms
io.lastwill.eventscan.polling-interval-ms=5000
# Address for oraclize proxy contract
# 0xf4c716ec3a201b960ca75a74452e663b00cf58b9 - mainnet
# 0xc282ef8e7d33111dc365eec25aea3f0beffe77fe - ropsten
io.lastwill.eventscan.contract.proxy-address=0xc282ef8e7d33111dc365eec25aea3f0beffe77fe
# Path to the file where stored last processed block.
io.lastwill.eventscan.start-block-file=./start-block
# crowdsale product to watch for him
io.lastwill.eventscan.contract.crowdsale-address=0x4eb5f89549c4d7a57267340c13fcca1049b57f9e


# trace sql
#spring.jpa.properties.hibernate.show_sql=true
#spring.jpa.properties.hibernate.use_sql_comments=true
#spring.jpa.properties.hibernate.format_sql=true